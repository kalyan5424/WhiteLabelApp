require 'dotenv'

desc 'Prepare Lane by pointing custom .env file'
lane :prepare_build do |options|
  puts "App option selected::":options
  setup_env(options[:unique_whitelabel_id])
  configure_android
  configure_ios
end

  # ====== Sets environment for selected unique_whitelabel_id for both iOS & android

def setup_env(unique_whitelabel_id)
  puts "white label id is::":unique_whitelabel_id
  ENV["UNIQUE_BUNDLE_ID"] = unique_whitelabel_id
  env_file = "./whitelabels/#{ENV["UNIQUE_BUNDLE_ID"]}/.env"
  assets = "./whitelabels/#{ENV["UNIQUE_BUNDLE_ID"]}/assets/."
  
  # ===== copy white label assets and env to root project
  sh("cp #{env_file} ../")
  sh("cp -a #{assets} ../src/assets")
  
  # ===== load the env_file into the environment 
  Dotenv.overload env_file
  
  # ====== ensure all necessary environment vars are setup
  ensure_env_vars(
    env_vars: %w[
       APP_ID
       APP_NAME
       UNIQUE_BUNDLE_ID
       API_BASE_URL
       GOOGLE_MAPS_API_KEY
       ANDROID_VERSION_CODE
       ANDROID_VERSION_NAME
       THEME_COLOR
       DEEPLINK_SCHEME
       FIREBASE_DEEPLINK_URL
       ANDROID_GEO_API_KEY
       IOS_GEO_API_KEY
       MIXPANEL_PROJECT_TOKEN
       BUGSNAG_NOTIFIER_API_KEY
       CODE_PUSH_DEPLOYMENT_KEY
       CODE_PUSH_DEPLOYMENT_KEY_IOS
       XCODE_PROJECT_NAME
       SKU
   ],
  )
end

private_lane :configure_android do
  puts "Configuring for android build"
  google_services_json_src = "./whitelabels/#{ENV["UNIQUE_BUNDLE_ID"]}/google-services.json"
  android_dest = "../android/app"
  sh("cp #{google_services_json_src} #{android_dest}")
  configure_assets("android")

  android_set_version_code(
    version_code: @build_number,
    gradle_file: "./android/app/build.gradle", # optional
  )
end

def configure_assets(platform)
  puts "Configuring assets for::":platform
  unique_whitelabel_id = ENV["UNIQUE_BUNDLE_ID"]
  ios_icon_file_path = "whitelabels/#{unique_whitelabel_id}/icon.png"
  android_icon_file_path = "whitelabels/#{unique_whitelabel_id}/icon_android.png"
  splash_file_path = "whitelabels/#{unique_whitelabel_id}/splash.png"
  unless File.exist?(ios_icon_file_path) && File.exist?(android_icon_file_path)
    UI.user_error!("1024x1024 'icon.png' file required in white label directory")
  end

  Dir.chdir("..") do
    if platform == "ios"
      sh("react-native set-splash --platform #{platform} --path './fastlane/#{splash_file_path}' --resize contain --background '#{ENV["THEME_COLOR"]}'")
      sh("react-native set-icon --platform #{platform} --path './fastlane/#{ios_icon_file_path}'")
    end
    if platform == "android"
      # splash_file_path = "./fastlane/whitelabels/#{unique_whitelabel_id}/splash.png"
      # android_dest = "android/app/src/main/res/drawable/"
      sh("react-native set-icon --platform #{platform} --path './fastlane/#{android_icon_file_path}'")
      # sh("cp #{splash_file_path} #{android_dest}")
      # sh("mv android/app/src/main/res/drawable/splash.png android/app/src/main/res/drawable/splash_image.png")
    end
  end
end

desc 'Generate the Android application Release APK in android/app/build/outputs/apk/release'
lane :buildReleaseApk do
  gradle(task: 'clean', project_dir: 'android/')
  gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/')
end

desc 'Generate the Android application Debug APK in android/app/build/outputs/apk/debug'
lane :buildDebugApk do
  gradle(task: 'clean', project_dir: 'android/')
  gradle(task: 'assemble', build_type: 'Debug', project_dir: 'android/')
end

desc 'Build & install the Android Release APK'
lane :buildReleaseInstall do
  gradle(task: 'clean', project_dir: 'android/')
  gradle(task: 'install', build_type: 'Release', project_dir: 'android/')
end

desc 'Build & install the Android Debug APK'
lane :buildDebugInstall do
  gradle(task: 'clean', project_dir: 'android/')
  gradle(task: 'install', build_type: 'Debug', project_dir: 'android/')
end

private_lane :configure_ios do
  puts "Configuring for iOS build"
  google_services_plist_src = "whitelabels/#{ENV["UNIQUE_BUNDLE_ID"]}/GoogleService-Info.plist"
  ios_dest = "../ios/#{ENV["XCODE_PROJECT_NAME"]}"
  sh("cp #{google_services_plist_src} #{ios_dest}")

  configure_assets("ios")

  xcodeproj_path = "./ios/#{ENV["XCODE_PROJECT_NAME"]}.xcodeproj"

  # increment_build_number(
  #   xcodeproj: xcodeproj_path,
  #   scheme: ENV["XCODE_SCHEME"],
  #   build_number: "#{@build_number}",
  # )

  # increment_build_number(
  #   build_number: app_store_build_number + 1,
  #   xcodeproj: xcodeproj_path
  # )

  update_info_plist(
    xcodeproj: xcodeproj_path,
    plist_path: "./#{ENV["XCODE_PROJECT_NAME"]}/Info.plist",
    display_name: (ENV["APP_NAME"]).to_s,
  )

  # update_plist(
  #   plist_path: "./ios/#{ENV["XCODE_PROJECT_NAME"]}/Info.plist",
  #   block: proc do |plist|
  #     plist["FacebookDisplayName"] = (ENV["FACEBOOK_DISPLAY_NAME"]).to_s
  #     plist["FacebookAppID"] = (ENV["FACEBOOK_APP_ID"]).to_s
  #     plist["CodePushDeploymentKey"] = (ENV["CodePushDeploymentKey_iOS"]).to_s
  #     plist["BugsnagAPIKey"] = (ENV["BUGSNAG_NOTIFIER_API_KEY"]).to_s
  #   end,
  # )

  ### update deep link url scheme

  # update_info_plist(
  #   xcodeproj: xcodeproj_path,
  #   plist_path: "./#{ENV["XCODE_PROJECT_NAME"]}/Info.plist",
  #   block: proc do |plist|
  #     urlScheme = plist["CFBundleURLTypes"].find { |scheme| scheme["CFBundleURLName"] == "bundle_identifier" }
  #     urlScheme[:CFBundleURLSchemes] = [ENV["DEEPLINK_SCHEME"]]
  #   end,
  # )

  # update_ios_entitlements_file

  update_app_identifier(
    xcodeproj: xcodeproj_path,
    plist_path: "./#{ENV["XCODE_PROJECT_NAME"]}/Info.plist",
    app_identifier: (ENV["APP_ID"]).to_s,
  )

  # produce(
  #   username: ENV["APPSTORE_USER"],
  #   app_identifier: ENV["APP_ID"],
  #   app_name: ENV["APP_NAME"],
  #   language: "English",
  #   app_version: "1.0",
  #   sku: ENV["SKU"],
  #   enable_services: {
  #     associated_domains: "on",
  #     push_notification: "on",
  #   },
  # )

  # match(
  #   type: "appstore",
  #   username: ENV["APPSTORE_USER"],
  #   app_identifier: [ENV["APP_ID"]],
  # )

  # if !is_on_ci
  #   match(
  #     type: "development",
  #     username: ENV["APPSTORE_USER"],
  #     app_identifier: [ENV["APP_ID"]],
  #   )
  # end

  # sigh(
  #   username: ENV["APPSTORE_USER"],
  #   app_identifier: ENV["APP_ID"],
  #   output_path: "ios/provisioning_profiles",
  # )

  # update_project_provisioning(
  #   xcodeproj: xcodeproj_path,
  #   profile: ENV["SIGH_PROFILE_PATH"],
  #   target_filter: ENV["XCODE_TARGET_NAME"],
  #   build_configuration: "Release",
  # )

  # cocoapods(podfile: "./ios/Podfile") unless !is_on_ci
end


# def update_ios_entitlements_file
#   entitlements_file_path = "./ios/#{ENV["XCODE_WORKSPACE_NAME"]}/<organization>.entitlements"
#   deeplink_scheme = "applinks:#{ENV["DEEPLINK_SCHEME"]}.page.link"
#   update_plist( # Updates the CLIENT_ID and GOOGLE_APP_ID string entries in the plist-file
#     plist_path: entitlements_file_path,
#     block: proc do |plist|
#       plist[:"com.apple.developer.associated-domains"] = [deeplink_scheme]
#     end
#   )
# end

